---
- name: Save License Data to Database/API
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    # SOLO le configurazioni statiche qui, NON le variabili da ManageIQ
    license_quotas:
      default:
        windows: 10
        rhel: 10
      tenant-production:
        windows: 50
        rhel: 30
      tenant-development:
        windows: 20
        rhel: 10
  
  tasks:
    - name: Display received data from ManageIQ
      debug:
        msg:
          - "Tenant: {{ tenant_name }}"
          - "OpenStack ID: {{ tenant_openstack_id }}"
          - "Windows VMs: {{ windows_count }}"
          - "RHEL VMs: {{ rhel_count }}"
    
    - name: Get quota for tenant
      set_fact:
        tenant_quota: "{{ license_quotas[tenant_name] | default(license_quotas['default']) }}"
    
    - name: Show quota
      debug:
        msg:
          - "Windows quota: {{ tenant_quota.windows }}"
          - "RHEL quota: {{ tenant_quota.rhel }}"
    
    # OPZIONE 1: Salva in License Manager API
    - name: Update license data via API
      block:
        - name: Ensure tenant exists
          uri:
            url: "{{ license_manager_url }}/api/v1/tenants"
            method: POST
            body_format: json
            body:
              openstack_id: "{{ tenant_openstack_id }}"
              name: "{{ tenant_name }}"
            status_code: [201, 400]
          ignore_errors: yes
        
        - name: Set Windows quota
          uri:
            url: "{{ license_manager_url }}/api/v1/tenants/openstack/{{ tenant_openstack_id }}/quotas/windows?quota={{ tenant_quota.windows }}"
            method: PUT
            status_code: 200
        
        - name: Set RHEL quota
          uri:
            url: "{{ license_manager_url }}/api/v1/tenants/openstack/{{ tenant_openstack_id }}/quotas/rhel?quota={{ tenant_quota.rhel }}"
            method: PUT
            status_code: 200
        
        - name: Update Windows usage
          uri:
            url: "{{ license_manager_url }}/api/v1/tenants/openstack/{{ tenant_openstack_id }}/usage/windows?used={{ windows_count }}"
            method: POST
            status_code: 200
        
        - name: Update RHEL usage
          uri:
            url: "{{ license_manager_url }}/api/v1/tenants/openstack/{{ tenant_openstack_id }}/usage/rhel?used={{ rhel_count }}"
            method: POST
            status_code: 200
      
      when: license_manager_url is defined
    
    # OPZIONE 2: Salva direttamente in PostgreSQL ManageIQ
    - name: Update license data in ManageIQ DB
      block:
        - name: Ensure postgresql library is available
          pip:
            name: psycopg2-binary
            state: present
          ignore_errors: true
        
        - name: Insert/Update license data
          postgresql_query:
            login_host: "{{ manageiq_db_host }}"
            login_port: 5432
            login_user: "{{ manageiq_db_user }}"
            login_password: "{{ manageiq_db_password }}"
            db: vmdb_production
            query: |
              INSERT INTO license_quotas 
                (tenant_id, tenant_name, tenant_ems_ref, 
                 windows_quota, windows_used, rhel_quota, rhel_used, last_updated)
              VALUES 
                ({{ tenant_id }}, '{{ tenant_name }}', '{{ tenant_openstack_id }}',
                 {{ tenant_quota.windows }}, {{ windows_count }}, 
                 {{ tenant_quota.rhel }}, {{ rhel_count }}, NOW())
              ON CONFLICT (tenant_id) 
              DO UPDATE SET
                tenant_name = EXCLUDED.tenant_name,
                tenant_ems_ref = EXCLUDED.tenant_ems_ref,
                windows_quota = EXCLUDED.windows_quota,
                windows_used = EXCLUDED.windows_used,
                rhel_quota = EXCLUDED.rhel_quota,
                rhel_used = EXCLUDED.rhel_used,
                last_updated = NOW();
          register: db_result
        
        - name: Success message
          debug:
            msg: "âœ… Database updated for tenant {{ tenant_name }}"
      
      when: manageiq_db_host is defined
